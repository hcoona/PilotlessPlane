<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
<# var underlyingName = "Underlying" + this.Model.StructureName; #>
using System.Net;
using <#= underlyingName #> = <#= this.NamespaceBase #>.Underlying.<#= this.Model.StructureName #>;

namespace <#= this.NamespaceBase #>.Models
{
    public partial struct <#= this.Model.StructureName #>
    {
		private <#= this.Model.StructureName #>() { }

<# foreach (var item in this.Model.Fields) { #>
        private readonly <#= item.Item1 #> m_<#= item.Item2 #>;
<# } #>

<# foreach (var item in this.Model.Fields) { #>
        public <#= item.Item1 #> <#= item.Item2 #> { get { return this.m_<#= item.Item2 #>; } }
<# } #>

		public static <#= this.Model.StructureName #> FromUnderlying(<#= underlyingName #> obj)
		{
			return new <#= this.Model.StructureName #>
			{
<# foreach (var item in this.Model.Fields) {
		if (item.Item1 == "byte" || item.Item1 == "sbyte" || item.Item1 == "char") { #>
				<#= item.Item2 #> = obj.<#= item.Item2 #>,
<#		} else if (item.Item1 == "ushort") { #>
				<#= item.Item2 #> = (ushort)IPAddress.NetworkToHostOrder(obj.<#= item.Item2 #>),
<#		} else { #>
				<#= item.Item2 #> = IPAddress.NetworkToHostOrder(obj.<#= item.Item2 #>),
<#		} #>
<# } #>
			};
		}
    }
}
